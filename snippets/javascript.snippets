# --- My own --- 
snippet isbrowser
	(isBrowser ? window : module)[isBrowser ? '${1}' : 'exports'] = {${2}};
snippet log
	console.log('${1:text}');${2}
snippet :
	'${1}' : ${2}
snippet req
	var ${1:lib} = require('$1');
snippet pack
	{
	  "name": "${1}"
	, "description": "${2}"
	, "version": "0.0.1"
	, "keywords": []
	, "author": "torgeir thoresen <@torgeir>"
	, "dependencies": {
	    "${3}": ""
	  }
	, "engines": { "node": "0.4.x" }
	, "main": "index"
	}
# buster
snippet ifbust
	if (typeof require == 'function' && typeof module == 'object') {
		buster = require('buster');
		require.paths.unshift('./lib');
	}

	buster.spec.expose();
	var assert = buster.assert;
	var refute = buster.refute;
snippet test
	'${1}' : function () {
	  ${2}
	}
snippet testa
	'${1}' : function (done) {
	  ${2}
	  done();
	}
snippet tc
	buster.testCase('${1}', {${2}});
# quunit
snippet qtest
	test('${1}', function () {
	  ${2}
	});

# Jasmine
snippet should
	should('${1}', function () {
	  ${2}
	});
snippet shoulda
	should('${1}', function (done) {
	  ${2}
	  done();
	});
snippet it
	it('${1}', function () {
	  ${2}
	});
snippet ita
	it('${1}', function (done) {
	  ${2}
	  done();
	});
snippet desc
	describe('${1}', function () {
	  ${2}
	});
snippet before
	before(function () {${1}});
snippet after
	after(function () {${1}});
# --- / My own ---
# Prototype
snippet proto
	${1}.prototype.${2} = function (${3}) { };
# Function
snippet fun
	function ${1} (${2}) {${3}}
# Anonymous Function
snippet f
	function (${1}) {${2}}${3}
# Immediate function
snippet (f
	(function (${1}) {${3}})(${2}
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {
	  ${2}
	} else {
	  ${3}
	}
# tertiary conditional
snippet t
	${1} ? ${2} : ${3}
# switch
snippet switch
	switch (${1:expression}) {
	  case '${3:case}':
	    ${4:// code}
	    break;
	  ${5}
	  default:
	    ${2:// code}
	}
# case
snippet case
	case '${1:case}':
	  ${2:// code}
	  break;
	${3}
# for (...) {...}
snippet for
	var ${2:i}, len;
	for ($2 = 0, len = ${1:Things}.length; $2 < len; $2${3: += 1}) {
	  ${4:$1[$2]};
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	var ${2:i};
	for ($2 = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
	  ${2:/* code */}
	}
# try
snippet try
	try {
	  ${1:/* code */}
	} catch(e) {
	  ${2:/* handle error */}
	}
# do...while
snippet do
	do {
	  ${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
	  ${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${2}}, ${1});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# Get Element
snippet try
	try {
	  ${2}
	} catch (${2:e}) {
	}
# console.log (Firebug)
snippet cl
	console.log(${1});
