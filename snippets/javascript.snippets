# --- My own --- 
snippet isnode
	if (typeof module !== 'undefined' && "exports" in module) {
	  module.exports = ${1};
	}
snippet isbrowser
	(isBrowser ? window : module)[isBrowser ? '${1}' : 'exports'] = {${2}};
snippet silly
	console.silly(${1:what});
snippet info
	console.info(${1:what});
snippet log
	console.log(${1:what});
snippet warn
	console.warn(${1:what});
snippet err
	console.error(${1:what});
snippet :
	'${1}' : ${2}
snippet req
	var $1 = require('${1:lib}');
snippet pack
	{
	    "name": "${1}"
	  , "description": "${2}"
	  , "version": "0.0.1"
	  , "keywords": []
	  , "author": "torgeir thoresen <@torgeir>"
	  , "dependencies": {
	      "${3}": ""
	  }
	  , "engines": { "node": "0.4.x" }
	  , "main": "index"
	}
# buster
snippet ifbust
	if (typeof require == 'function' && typeof module == 'object') {
		buster = require('buster');
		require.paths.unshift('./lib');
	}

	buster.spec.expose();
	var assert = buster.assert;
	var refute = buster.refute;
snippet test
	'${1}' : function () {
	  ${2}
	}
snippet testa
	'${1}' : function (done) {
	  ${2}
	  done();
	}
snippet tc
	buster.testCase('${1}', {${2}});
# quunit
snippet qtest
	test('${1}', function () {
	  ${2}
	});

# Jasmine
snippet should
	should('${1}', function () {
	  ${2}
	});
snippet shoulda
	should('${1}', function (done) {
	  ${2}
	  done();
	});
snippet it
	it('${1}', function () {
	  ${2}
	});
snippet ita
	it('${1}', function (done) {
	  ${2}
	  done();
	});
snippet desc
	describe('${1}', function () {
	  ${2}
	});
snippet before
	before(function () {${1}});
snippet after
	after(function () {${1}});
snippet ex
	expect(${1:what}).to${2:Equal}(${3});
# --- / My own ---
# Prototype
snippet proto
	${1}.prototype.${2} = function (${3}) { };
# Function
snippet fun
	function ${1} (${2}) {${3}}
# Anonymous Function
snippet f
	function (${1}) {${2}}
# Immediate function
snippet (f
	(function (${1}) {${3}})(${2});
# if
snippet if
	if (${1}) {${2}}
# if ... else
snippet ife
	if (${1}) {
	  ${2}
	} else {
	  ${3}
	}
# tertiary conditional
snippet t
	${1} ? ${2} : ${3}
# switch
snippet switch
	switch (${1}) {
	  case '${2}':
	    ${3}
	    break;
	  
	  default:
	    ${4}
	}
# case
snippet case
	case '${1}':
	  ${2}
	  break;
	
# for (...) {...}
snippet for
	var ${2:i}, len;
	for ($2 = 0, len = ${1:Things}.length; $2 < len; $2${3: += 1}) {
	  ${4:$1[$2]};
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	var ${2:i}, len = ${1:Things}.length - 1;
	for ($2 = len; $2 >= 0; $2${3: -= 1}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet while
	while (${1}) {
	  ${2}
	}
# try
snippet try
	try {
	  ${1}
	} catch (e) {
	  ${2}
	}
# do...while
snippet do
	do {
	  ${2}
	}
	while (${1});
# Object Method
snippet :f
	${1:method}: function (${2:args}) {
	  ${3}
	}${4}
# setTimeout function
snippet timeout
	setTimeout(function () {${2}}, ${1});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# Get Element
snippet try
	try {
	  ${1}
	}
	catch (e) {
	  ${3}
	}
# console.log (Firebug)
snippet cl
	console.log(${1});
